<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFCore.Sharding</name>
    </assembly>
    <members>
        <member name="T:EFCore.Sharding.Util.AsyncHelper">
            <summary>
            异步转同步,防止ASP.NET中死锁
            https://cpratt.co/async-tips-tricks/
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            同步执行
            </summary>
            <param name="func">任务</param>
        </member>
        <member name="M:EFCore.Sharding.Util.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            同步执行
            </summary>
            <typeparam name="TResult">返回类型</typeparam>
            <param name="func">任务</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.Util.Extention">
            <summary>
            IQueryable"T"的拓展操作
            作者：Coldairarrow
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.GetIQueryable(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            获取IQueryable
            </summary>
            <param name="context">上下文</param>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            连接表达式与运算
            </summary>
            <typeparam name="T">参数</typeparam>
            <param name="one">原表达式</param>
            <param name="another">新的表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            连接表达式或运算
            </summary>
            <typeparam name="T">参数</typeparam>
            <param name="one">原表达式</param>
            <param name="another">新表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.RemoveSkip``1(System.Linq.IQueryable{``0})">
            <summary>
            删除Skip表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.RemoveSkip(System.Linq.IQueryable)">
            <summary>
            删除Skip表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.RemoveTake``1(System.Linq.IQueryable{``0})">
            <summary>
            删除Take表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.RemoveTake(System.Linq.IQueryable)">
            <summary>
            删除Take表达式
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.GetSkipCount(System.Linq.IQueryable)">
            <summary>
            获取Skip数量
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.GetTakeCount(System.Linq.IQueryable)">
            <summary>
            获取Take数量
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.GetOrderBy(System.Linq.IQueryable)">
            <summary>
            获取排序参数
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.ChangeSource(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            切换数据源,保留原数据源中的Expression
            </summary>
            <param name="source">原数据源</param>
            <param name="targetSource">目标数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.GetObjQuery(System.Linq.IQueryable)">
            <summary>
            获取ObjectQuery
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.Extention.ToSql(System.Linq.IQueryable)">
            <summary>
            转为SQL语句，包括参数
            </summary>
            <param name="query">查询原源</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.Util.Extention.RemoveOrderByVisitor">
            <summary>
            删除OrderBy表达式
            </summary>
        </member>
        <member name="T:EFCore.Sharding.Util.Extention.RemoveSkipVisitor">
            <summary>
            删除Skip表达式
            </summary>
        </member>
        <member name="T:EFCore.Sharding.Util.Extention.RemoveTakeVisitor">
            <summary>
            删除Take表达式
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToList``1(System.Data.DataTable)">
            <summary>
            DataTable转List
            </summary>
            <typeparam name="T">转换类型</typeparam>
            <param name="dt">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToCsvStr(System.Data.DataTable)">
             <summary>
            将DataTable转换为标准的CSV字符串
             </summary>
             <param name="dt">数据表</param>
             <returns>返回标准的CSV</returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            给IEnumerable拓展ForEach方法
            </summary>
            <typeparam name="T">模型类</typeparam>
            <param name="iEnumberable">数据源</param>
            <param name="func">方法</param>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.CastToList``1(System.Collections.IEnumerable)">
            <summary>
            IEnumerable转换为List'T'
            </summary>
            <typeparam name="T">参数</typeparam>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将IEnumerable'T'转为对应的DataTable
            </summary>
            <typeparam name="T">数据模型</typeparam>
            <param name="iEnumberable">数据源</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.IsNullOrEmpty(System.Object)">
            <summary>
            判断是否为Null或者空
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToJson(System.Object)">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取某属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.GetGetFieldValue(System.Object,System.String)">
            <summary>
            获取某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            设置某字段值
            </summary>
            <param name="obj">对象</param>
            <param name="fieldName">字段名</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ChangeType(System.Object,System.Type)">
            <summary>
            改变实体类型
            </summary>
            <param name="obj">对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ChangeType``1(System.Object)">
            <summary>
            改变实体类型
            </summary>
            <typeparam name="T">目标泛型</typeparam>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ChangeType_ByConvert(System.Object,System.Type)">
            <summary>
            改变类型
            </summary>
            <param name="obj">原对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToObject``1(System.String)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToObject(System.String,System.Type)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <param name="jsonStr">json字符串</param>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToDataTable(System.String)">
            <summary>
            将Json字符串转为DataTable
            </summary>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.PublicExtention.ToMurmurHash(System.String)">
            <summary>
            转为MurmurHash
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.Util.ParameterReplaceVisitor">
            <summary>
            继承ExpressionVisitor类，实现参数替换统一
            </summary>
        </member>
        <member name="T:EFCore.Sharding.Util.JobHelper">
            <summary>
            任务帮助类
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.JobHelper.SetIntervalJob(System.Action,System.TimeSpan)">
            <summary>
            设置一个时间间隔的循环操作
            </summary>
            <param name="action">执行的操作</param>
            <param name="timeSpan">时间间隔</param>
            <returns>任务标识Id</returns>
        </member>
        <member name="M:EFCore.Sharding.Util.JobHelper.SetDailyJob(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置每天定时任务
            </summary>
            <param name="action">执行的任务</param>
            <param name="h">时</param>
            <param name="m">分</param>
            <param name="s">秒</param>
            <returns>任务标识Id</returns>
        </member>
        <member name="M:EFCore.Sharding.Util.JobHelper.SetDelayJob(System.Action,System.TimeSpan)">
            <summary>
            设置延时任务,仅执行一次
            </summary>
            <param name="action">执行的操作</param>
            <param name="delay">延时时间</param>
            <returns>任务标识Id</returns>
        </member>
        <member name="M:EFCore.Sharding.Util.JobHelper.SetCronJob(System.Action,System.String)">
            <summary>
            通过表达式创建任务
            表达式规则参考:http://www.jsons.cn/quartzcron/
            </summary>
            <param name="action">执行的操作</param>
            <param name="cronExpression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.JobHelper.RemoveJob(System.String)">
            <summary>
            删除任务
            </summary>
            <param name="jobId">任务标识Id</param>
        </member>
        <member name="T:EFCore.Sharding.Util.RandomHelper">
            <summary>
            Random随机数帮助类
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.RandomHelper.Next(System.Int32,System.Int32)">
            <summary>
            下一个随机数
            </summary>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.RandomHelper.Next``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            下一个随机值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="source">值的集合</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.Util.TypeBuilderHelper">
            <summary>
            运行时创建类型
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Util.TypeBuilderHelper.BuildType(EFCore.Sharding.Util.TypeConfig)">
            <summary>
            创建类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.Util.TypeBuilderHelper.GetConfig(System.Type)">
            <summary>
            获取配置
            </summary>
            <param name="type">原类型</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.Util.TypeConfig">
            <summary>
            类型配置
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.TypeConfig.FullName">
            <summary>
            类型名
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.TypeConfig.AssemblyName">
            <summary>
            程序集名
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.TypeConfig.Properties">
            <summary>
            拥有的属性
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.TypeConfig.Attributes">
            <summary>
            拥有的特性
            </summary>
        </member>
        <member name="T:EFCore.Sharding.Util.PropertyConfig">
            <summary>
            属性配置
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.PropertyConfig.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.PropertyConfig.PropertyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.PropertyConfig.Attributes">
            <summary>
            属性包含的自定义特性
            </summary>
        </member>
        <member name="T:EFCore.Sharding.Util.AttributeConfig">
            <summary>
            特性配置
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.AttributeConfig.Attribute">
            <summary>
            特性类型
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.AttributeConfig.ConstructorArgs">
            <summary>
            构造函数参数
            </summary>
        </member>
        <member name="P:EFCore.Sharding.Util.AttributeConfig.Properties">
            <summary>
            初始化属性
            </summary>
        </member>
        <member name="T:EFCore.Sharding.AbstractProvider">
            <summary>
            数据库提供抽象类
            </summary>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.UseDatabase(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection)">
            <summary>
            使用某个数据库
            </summary>
            <param name="dbContextOptionsBuilder">dbContextOptionsBuilder</param>
            <param name="dbConnection">连接字符串</param>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.GetModelBuilder">
            <summary>
            获取ModelBuilder
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.GetRepository(System.String)">
            <summary>
            获取仓储接口
            </summary>
            <param name="conString">完整数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="P:EFCore.Sharding.AbstractProvider.DbProviderFactory">
            <summary>
            提供工厂
            </summary>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.GetDbConnection">
            <summary>
            获取DbConnection
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.GetDbCommand">
            <summary>
            获取DbCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.GetDbParameter">
            <summary>
            获取DbParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.AbstractProvider.GetDataAdapter">
            <summary>
            获取DataAdapter
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.DbModelFactory.GetDbCompiledModel(System.String,EFCore.Sharding.DatabaseType)">
            <summary>
            获取DbCompiledModel
            </summary>
            <param name="conStr">数据库连接名或字符串</param>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.DbModelFactory.GetEntityType(System.String)">
            <summary>
            获取实体模型
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.DbModelFactory.AddEntityType(System.String,System.Type)">
            <summary>
            添加实体模型
            </summary>
            <param name="tableName">表名</param>
            <param name="entityType">实体模型</param>
        </member>
        <member name="T:EFCore.Sharding.DbFactory">
            <summary>
            数据库工厂
            </summary>
        </member>
        <member name="M:EFCore.Sharding.DbFactory.GetRepository(System.String,EFCore.Sharding.DatabaseType)">
            <summary>
            根据配置文件获取数据库类型，并返回对应的工厂接口
            </summary>
            <param name="conString">完整数据库链接字符串</param>
            <param name="dbType">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.DbFactory.GetShardingRepository(System.String)">
            <summary>
            获取ShardingRepository
            </summary>
            <param name="absDbName">抽象数据库</param>
            <returns>ShardingRepository</returns>
        </member>
        <member name="T:EFCore.Sharding.IBaseRepository">
            <summary>
            基数据仓储
            </summary>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Insert``1(``0)">
            <summary>
            添加单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.InsertAsync``1(``0)">
            <summary>
            添加单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Insert``1(System.Collections.Generic.List{``0})">
            <summary>
            添加多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.InsertAsync``1(System.Collections.Generic.List{``0})">
            <summary>
            添加多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.DeleteAll``1">
            <summary>
            删除所有记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.DeleteAllAsync``1">
            <summary>
            删除所有记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Delete``1(``0)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.DeleteAsync``1(``0)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Delete``1(System.Collections.Generic.List{``0})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.DeleteAsync``1(System.Collections.Generic.List{``0})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件删除记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            按条件删除记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Update``1(``0)">
            <summary>
            更新单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateAsync``1(``0)">
            <summary>
            更新单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.Update``1(System.Collections.Generic.List{``0})">
            <summary>
            更新多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateAsync``1(System.Collections.Generic.List{``0})">
            <summary>
            更新多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateAny``1(``0,System.Collections.Generic.List{System.String})">
            <summary>
            更新单条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateAnyAsync``1(``0,System.Collections.Generic.List{System.String})">
            <summary>
            更新单条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entity">实体对象</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateAny``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String})">
            <summary>
            更新多条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateAnyAsync``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String})">
            <summary>
            更新多条记录的某些属性
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体对象集合</param>
            <param name="properties">属性</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateWhere``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{``0})">
            <summary>
            按照条件更新记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="whereExpre">筛选条件</param>
            <param name="set">更新操作</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.UpdateWhereAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Action{``0})">
            <summary>
            按照条件更新记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="whereExpre">筛选条件</param>
            <param name="set">更新操作</param>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.GetList``1">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IBaseRepository.GetListAsync``1">
            <summary>
            获取所有数据
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.IRepository">
            <summary>
            操作接口
            </summary>
        </member>
        <member name="P:EFCore.Sharding.IRepository.HandleSqlLog">
            <summary>
            SQL日志处理方法
            </summary>
            <value>
            The handle SQL log.
            </value>
        </member>
        <member name="P:EFCore.Sharding.IRepository.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:EFCore.Sharding.IRepository.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="M:EFCore.Sharding.IRepository.BulkInsert``1(System.Collections.Generic.List{``0})">
            <summary>
            使用Bulk批量导入,速度快
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.DeleteAll(System.Type)">
            <summary>
            删除所有记录
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.DeleteAllAsync(System.Type)">
            <summary>
            删除所有记录
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete(System.Type,System.String)">
            <summary>
            删除单条记录
            </summary>
            <param name="type">实体类型</param>
            <param name="key">主键</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.DeleteAsync(System.Type,System.String)">
            <summary>
            删除单条记录
            </summary>
            <param name="type">实体类型</param>
            <param name="key">主键</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            删除多条记录
            </summary>
            <param name="type">实体类型</param>
            <param name="keys">多条记录主键集合</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.DeleteAsync(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            删除多条记录
            </summary>
            <param name="type">实体类型</param>
            <param name="keys">多条记录主键集合</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete``1(System.String)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="key">主键</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.DeleteAsync``1(System.String)">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="key">主键</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete``1(System.Collections.Generic.List{System.String})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="keys">多条记录主键集合</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.DeleteAsync``1(System.Collections.Generic.List{System.String})">
            <summary>
            删除多条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="keys">多条记录主键集合</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete_Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=>x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="where">条件</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete_SqlAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=>x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="where">条件</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete_Sql(System.Type,System.String,System.Object[])">
            <summary>
            使用SQL语句按照条件删除数据
            </summary>
            <param name="entityType">实体类型</param>
            <param name="where">动态where</param>
            <param name="paramters">where参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete_SqlAsync(System.Type,System.String,System.Object[])">
            <summary>
            使用SQL语句按照条件删除数据
            </summary>
            <param name="entityType">实体类型</param>
            <param name="where">动态where</param>
            <param name="paramters">where参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete_Sql(System.Linq.IQueryable)">
            <summary>
            删除指定数据源
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.Delete_SqlAsync(System.Linq.IQueryable)">
            <summary>
            删除指定数据源
            </summary>
            <param name="source">数据源</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.UpdateWhere_Sql``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.UpdateWhere_SqlAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.UpdateWhere_Sql(System.Type,System.String,System.Object[],System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="entityType">实体类型</param>
            <param name="where">筛选条件</param>
            <param name="paramters">参数</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.UpdateWhere_SqlAsync(System.Type,System.String,System.Object[],System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="entityType">实体类型</param>
            <param name="where">筛选条件</param>
            <param name="paramters">参数</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.UpdateWhere_Sql(System.Linq.IQueryable,System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="source">数据源</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.UpdateWhere_SqlAsync(System.Linq.IQueryable,System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="source">数据源</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetEntity``1(System.Object[])">
            <summary>
            获取单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetEntityAsync``1(System.Object[])">
            <summary>
            获取单条记录
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetList(System.Type)">
            <summary>
            获取列表
            </summary>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetListAsync(System.Type)">
            <summary>
            获取列表
            </summary>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetIQueryable``1">
            <summary>
            获取IQueryable
            注:默认取消实体追踪
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetIQueryable(System.Type)">
            <summary>
            获取IQueryable
            注:默认取消实体追踪
            </summary>
            <param name="type">实体泛型</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetDataTableWithSql(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            通过SQL获取DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetDataTableWithSqlAsync(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            通过SQL获取DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetListBySql``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            通过SQL获取List
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="sqlStr">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.GetListBySqlAsync``1(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            通过SQL获取List
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="sqlStr">SQL语句</param>
            <param name="parameters">SQL参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IRepository.ExecuteSql(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:EFCore.Sharding.IRepository.ExecuteSqlAsync(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            执行SQL语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">SQL参数</param>
        </member>
        <member name="T:EFCore.Sharding.IShardingRepository">
            <summary>
            sharding仓库操作接口
            </summary>
        </member>
        <member name="M:EFCore.Sharding.IShardingRepository.GetIShardingQueryable``1">
            <summary>
            获取IShardingQueryable
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:EFCore.Sharding.DatabaseType.SqlServer">
            <summary>
            SqlServer数据库
            </summary>
        </member>
        <member name="F:EFCore.Sharding.DatabaseType.MySql">
            <summary>
            MySql数据库
            </summary>
        </member>
        <member name="F:EFCore.Sharding.DatabaseType.Oracle">
            <summary>
            Oracle数据库
            </summary>
        </member>
        <member name="F:EFCore.Sharding.DatabaseType.PostgreSql">
            <summary>
            PostgreSql数据库
            </summary>
        </member>
        <member name="F:EFCore.Sharding.DatabaseType.SQLite">
            <summary>
            SQLite数据库
            </summary>
        </member>
        <member name="T:EFCore.Sharding.ExpandByDateMode">
            <summary>
            按时间扩容模式
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ExpandByDateMode.PerMinute">
            <summary>
            每分钟
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ExpandByDateMode.PerHour">
            <summary>
            每小时
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ExpandByDateMode.PerDay">
            <summary>
            每天
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ExpandByDateMode.PerMonth">
            <summary>
            每月
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ExpandByDateMode.PerYear">
            <summary>
            每年
            </summary>
        </member>
        <member name="T:EFCore.Sharding.ReadWriteType">
            <summary>
            读写模式
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ReadWriteType.Read">
            <summary>
            只读
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ReadWriteType.Write">
            <summary>
            只写
            </summary>
        </member>
        <member name="T:EFCore.Sharding.UpdateType">
            <summary>
            更新模式
            注:[Field]=[Field] {UpdateType} value
            </summary>
        </member>
        <member name="F:EFCore.Sharding.UpdateType.Equal">
            <summary>
            等,即赋值,[Field]= value
            </summary>
        </member>
        <member name="F:EFCore.Sharding.UpdateType.Add">
            <summary>
            自增,[Field]=[Field] + value
            </summary>
        </member>
        <member name="F:EFCore.Sharding.UpdateType.Minus">
            <summary>
            自减,[Field]=[Field] - value
            </summary>
        </member>
        <member name="F:EFCore.Sharding.UpdateType.Multiply">
            <summary>
            自乘,[Field]=[Field] * value
            </summary>
        </member>
        <member name="F:EFCore.Sharding.UpdateType.Divide">
            <summary>
            自除,[Field]=[Field] / value
            </summary>
        </member>
        <member name="M:EFCore.Sharding.DbRepository.#ctor(System.String,EFCore.Sharding.DatabaseType)">
            <summary>
            构造函数
            </summary>
            <param name="conString">构造参数，可以为数据库连接字符串或者DbContext</param>
            <param name="dbType">数据库类型</param>
        </member>
        <member name="T:EFCore.Sharding.IConfigInit">
            <summary>
            配置初始化
            </summary>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.SetEntityAssembly(System.String[])">
            <summary>
            设置实体的程序集
            注:使用模糊匹配获取,例如传入"Entity",则将会扫描所有名字包含"Entity"的程序集
            注:实体类必须拥有System.ComponentModel.DataAnnotations.Schema.TableAttribute特性
            </summary>
            <param name="entityAssemblyNames">程序集名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.AddAbsDb(EFCore.Sharding.DatabaseType,System.String)">
            <summary>
            添加抽象数据库
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="absDbName">抽象数据库名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.AddPhysicDbGroup(System.String,System.String)">
            <summary>
            添加物理数据库组
            </summary>
            <param name="groupName">组名</param>
            <param name="absDbName">抽象数据库名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.AddPhysicDb(EFCore.Sharding.ReadWriteType,System.String,System.String)">
            <summary>
            添加物理数据库
            </summary>
            <param name="opType">读写类型,同时读写填写ReadWriteType.Read | ReadWriteType.Write</param>
            <param name="conString">连接字符串</param>
            <param name="groupName">数据库组名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.AddPhysicTable``1(System.String,System.String)">
            <summary>
            添加物理数据表
            </summary>
            <typeparam name="TEntity">对应抽象表类型</typeparam>
            <param name="physicTableName">物理表明</param>
            <param name="groupName">数据库组名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.SetShardingRule``1(EFCore.Sharding.AbsShardingRule{``0},System.String)">
            <summary>
            设置分表规则
            </summary>
            <typeparam name="TEntity">对应抽象表类型</typeparam>
            <param name="shardingRule">具体分表规则</param>
            <param name="absDbName">抽象数据库名</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IConfigInit.AutoExpandByDate``1(EFCore.Sharding.ExpandByDateMode,System.ValueTuple{System.DateTime,System.DateTime,System.String}[])">
            <summary>
            通过日期自动扩容
            优点:即自动定时按照建表,无需数据迁移
            </summary>
            <typeparam name="TEntity">对应抽象表类型</typeparam>
            <param name="expandByDateMode">扩容模式</param>
            <param name="ranges">表在不同时间段的分布设置,即某个时间段的表都分布在特定的数据库组中</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.ShardingConfig">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ShardingConfig.DefaultAbsDbName">
            <summary>
            默认抽象数据库名
            </summary>
        </member>
        <member name="F:EFCore.Sharding.ShardingConfig.DefaultDbGourpName">
            <summary>
            默认数据库组名
            </summary>
        </member>
        <member name="M:EFCore.Sharding.ShardingConfig.Init(System.Action{EFCore.Sharding.IConfigInit})">
            <summary>
            初始化,只需程序启动执行一次
            </summary>
            <param name="configInit">初始化操作</param>
        </member>
        <member name="M:EFCore.Sharding.ShardingConfig.UseEFCoreSharding(Microsoft.Extensions.DependencyInjection.IServiceCollection,EFCore.Sharding.DatabaseType,System.String,System.Action{EFCore.Sharding.IConfigInit})">
            <summary>
            使用EFCoreSharding
            可直接注入IRepository
            </summary>
            <param name="services">服务集合</param>
            <param name="dbType">数据库默认类型</param>
            <param name="conString">数据库默认连接字符串</param>
            <param name="configInit">分表配置项</param>
            <returns></returns>
        </member>
        <member name="P:EFCore.Sharding.ShardingConfig.AllEntityTypes">
            <summary>
            框架所有自定义类
            </summary>
        </member>
        <member name="T:EFCore.Sharding.Extention">
            <summary>
            拓展
            </summary>
        </member>
        <member name="M:EFCore.Sharding.Extention.ToSharding``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            转为Sharding
            </summary>
            <typeparam name="T">实体泛型</typeparam>
            <param name="source">数据源</param>
            <param name="absDbName">抽象数据库</param>
            <returns>IShardingQueryable</returns>
        </member>
        <member name="T:EFCore.Sharding.IShardingQueryable`1">
            <summary>
            IShardingQueryable
            </summary>
            <typeparam name="T">逻辑表泛型</typeparam>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            筛选
            </summary>
            <param name="predicate">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Where(System.String,System.Object[])">
            <summary>
            动态筛选
            </summary>
            <param name="predicate">动态表达式</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Skip(System.Int32)">
            <summary>
            SKip
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Take(System.Int32)">
            <summary>
            Take
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            顺序排序
            </summary>
            <typeparam name="TKey">返回类型</typeparam>
            <param name="keySelector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            倒序排序
            </summary>
            <typeparam name="TKey">返回类型</typeparam>
            <param name="keySelector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.OrderBy(System.String,System.Object[])">
            <summary>
            动态排序
            </summary>
            <param name="ordering">动态表达式</param>
            <param name="values">参数</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Count">
            <summary>
            获取数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.CountAsync">
            <summary>
            异步获取数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.ToList">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.ToListAsync">
            <summary>
            异步获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.FirstOrDefault">
            <summary>
            获取第一个,若不存在则返回默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.FirstOrDefaultAsync">
            <summary>
            获取第一个,若不存在则返回默认值
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            异步判断是否存在
            </summary>
            <param name="predicate">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            计算最大值
            </summary>
            <typeparam name="TResult">数据类型</typeparam>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            异步计算最大值
            </summary>
            <typeparam name="TResult">数据类型</typeparam>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            计算最小值
            </summary>
            <typeparam name="TResult">数据类型</typeparam>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            异步计算最小值
            </summary>
            <typeparam name="TResult">数据类型</typeparam>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            异步计算平均值
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.IShardingQueryable`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            异步求和
            </summary>
            <param name="selector">表达式</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.ShardingHelper.MapTable(System.Type,System.String)">
            <summary>
            映射物理表
            </summary>
            <param name="absTable">抽象表类型</param>
            <param name="targetTableName">目标物理表名</param>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.AbsShardingRule`1">
            <summary>
            分表规则基类
            注:具体分表规则只需要实现BuildTableSuffix,BuildTableName与BuildDate其中之一即可
            </summary>
            <typeparam name="TEntity">逻辑表泛型</typeparam>
        </member>
        <member name="M:EFCore.Sharding.AbsShardingRule`1.BuildTableSuffix(`0)">
            <summary>
            生成表名后缀
            注:若逻辑表为Base_UnitTest,生成的后缀为1,则最终确定的表名为Base_UnitTest_1
            </summary>
            <param name="obj">实体对象</param>
            <returns>表名后缀</returns>
        </member>
        <member name="M:EFCore.Sharding.AbsShardingRule`1.BuildTableName(`0)">
            <summary>
            生成完整表名
            </summary>
            <param name="obj">实体对象</param>
            <returns>完整表名</returns>
        </member>
        <member name="M:EFCore.Sharding.AbsShardingRule`1.BuildDate(`0)">
            <summary>
            生成日期
            注:仅用在AutoExpandByDate中
            </summary>
            <param name="obj">实体对象</param>
            <returns>日期</returns>
        </member>
        <member name="T:EFCore.Sharding.ModShardingRule`1">
            <summary>
            取模分片规则
            说明:根据某字段的HASH,然后取模后得到表名后缀
            举例:Base_User_0,Base_User为抽象表名,_0为后缀
            警告:使用简单,但是扩容后需要大量数据迁移,不推荐使用
            </summary>
        </member>
        <member name="P:EFCore.Sharding.ModShardingRule`1.KeyField">
            <summary>
            用来mod的字段
            </summary>
        </member>
        <member name="P:EFCore.Sharding.ModShardingRule`1.Mod">
            <summary>
            mod值
            </summary>
        </member>
        <member name="M:EFCore.Sharding.ModShardingRule`1.BuildTableSuffix(`0)">
            <summary>
            生成表名后缀(推荐实现此方法)
            注:若逻辑表为Base_UnitTest,生成的后缀为1,则最终确定的表名为Base_UnitTest_1
            注:BuildTableSuffix与BuildTableName实现二选一
            </summary>
            <param name="obj">实体对象</param>
            <returns>
            表名后缀
            </returns>
        </member>
        <member name="T:EFCore.Sharding.SnowflakeModShardingRule`1">
            <summary>
            基于雪花Id的mod分片,具体的规则请参考此本写法
            优点:数据扩容无需数据迁移,以时间轴进行扩容
            缺点:可能会存在数据热点问题
            建议:推荐使用此分片规则,易于使用
            </summary>
        </member>
        <member name="M:EFCore.Sharding.SnowflakeModShardingRule`1.BuildTableSuffix(`0)">
            <summary>
            生成表名后缀(推荐实现此方法)
            注:若逻辑表为Base_UnitTest,生成的后缀为1,则最终确定的表名为Base_UnitTest_1
            注:BuildTableSuffix与BuildTableName实现二选一
            </summary>
            <param name="obj">实体对象</param>
            <returns>
            表名后缀
            </returns>
        </member>
        <member name="T:EFCore.Sharding.DistributedTransaction">
            <summary>
            数据库分布式事务,跨库事务
            </summary>
        </member>
        <member name="T:EFCore.Sharding.DistributedTransactionFactory">
            <summary>
            分布式事务工厂
            </summary>
        </member>
        <member name="M:EFCore.Sharding.DistributedTransactionFactory.GetDistributedTransaction">
            <summary>
            获取分布式事务
            </summary>
            <returns></returns>
        </member>
        <member name="T:EFCore.Sharding.ITransaction">
            <summary>
            食物操作接口
            </summary>
        </member>
        <member name="M:EFCore.Sharding.ITransaction.RunTransaction(System.Action,System.Data.IsolationLevel)">
            <summary>
            执行事务,具体执行操作包括在action中
            注:支持自定义事务级别,默认为ReadCommitted
            </summary>
            <param name="action">执行操作</param>
            <param name="isolationLevel">事务级别,默认为ReadCommitted</param>
            <returns></returns>
        </member>
        <member name="M:EFCore.Sharding.ITransaction.RunTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Data.IsolationLevel)">
            <summary>
            执行事务,具体执行操作包括在action中
            注:支持自定义事务级别,默认为ReadCommitted
            </summary>
            <param name="action">执行操作</param>
            <param name="isolationLevel">事务级别,默认为ReadCommitted</param>
            <returns></returns>
        </member>
    </members>
</doc>
